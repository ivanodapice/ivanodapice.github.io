{"version":3,"sources":["raisin/raisin.js","clock/clock.js","search/search.js","binance/binance.js","openweather/openweather.js","unsplash/unsplash.js","stormglass/stormglass.js","index.js"],"names":["raisinLinks","document","querySelectorAll","searchInput","querySelector","truncateLinkName","raisinContainerWidth","offsetWidth","maxLength","forEach","link","innerHTML","length","replace","slice","Math","max","addEventListener","event","preventDefault","placeholder","hostname","clockContainer","startClockModule","displayTime","displayDate","toggleClockDisplay","d","Date","h","getHours","m","getMinutes","s","getSeconds","day","toLocaleDateString","weekday","toUpperCase","hour","minute","second","setTimeout","today","options","year","month","classList","toggle","iconList","startSearchModule","searchContainer","toggleEngineIcons","sendSearch","icon","dataset","state","target","input","key","activeEngine","activeEngineDomain","find","b","attributes","value","url","window","open","cryptoPicked","split","cryptoButtonsContainer","binanceLoaderContainer","startBinanceModule","klineData","tickerData","Promise","all","getBinanceKlinesData","getBinanceTickerData","binanceContainer","style","display","generateButtons","generateChartLine","completeFooterValues","toggleButtons","klinesParameters","pair","response","fetch","klinesPath","ok","displayBinanceErrorOnPage","Error","status","statusText","json","tickerParameters","tickerPath","symbol","newButton","createElement","append","className","firstChild","data","filteredData","map","Number","svg","svgContainerWidth","maxCryptoValue","minCryptoValue","min","xAxisPixelvalues","index","yAxisPixelValues","round","svgPath","pixel","join","svgCode","differenceValue","currentValue","lastPrice","priceChange","pairSymbol","binanceErrorContainer","button","openweatherInner","loaderContainer","startOpenWeatherModule","dom","catchOpenWeatherDomElements","getOpenWeatherData","fillOpenWeatherDomElements","toggleOpenWeatherDisplay","container","city","units","apiKey","displayOpenWeatherErrorOnPage","temperature","humid","icons","cityName","sunrise","sunset","getAttribute","includes","weather","main","toLowerCase","temp","humidity","formatTimestamp","sys","errorContainer","stamp","date","unsplashLoaderContainer","startUnsplashModule","getUnsplashData","image","unsplashContainer","src","urls","small","parameters","orientation","collectionId","path","displayUnsplashErrorOnPage","unsplashErrorContainer","stormglassLoaderContainer","startStormglassModule","catchStormglassDomElements","getStormglassData","fillStormglassDomElements","stormglassContainer","currentISODate","toISOString","lat","lng","headers","Authorization","displayStormglassErrorOnPage","jsonResponse","hours","time","spotName","waterTemporary","windDirection","windSpeed","waveHeight","wavePeriod","wavedir","waterTemperature","meto","noaa","sg","transform","dwd","waveDirection","meteo","stormglassErrorContainer","stormglassErrorCode","stormglassErrorMesage"],"mappings":"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","file":"src.8c078a4e.js","sourceRoot":"../src","sourcesContent":["// //////// RAISIN //////// //\nconst raisinLinks = [...document.querySelectorAll('.raisin-link')]\nconst searchInput = document.querySelector('.pp-search-input')\n\n/**\n * Truncate link name to avoid multiline text breaking\n * it catches the container width, set a maximum character count authorized based on the container width\n * and then slice the link name at the right length\n * @returns {void} Nothing\n */\nfunction truncateLinkName() {\n  const raisinContainerWidth = document.querySelector('raisin').offsetWidth\n  let maxLength = 0\n\n  switch (true) {\n    case (raisinContainerWidth >= 120 && raisinContainerWidth <= 123):\n      maxLength = 10\n      break\n    case (raisinContainerWidth >= 124 && raisinContainerWidth <= 131):\n      maxLength = 11\n      break\n    case (raisinContainerWidth >= 132 && raisinContainerWidth <= 135):\n      maxLength = 12\n      break\n    case (raisinContainerWidth >= 136):\n      maxLength = 13\n      break\n    default:\n      maxLength = 10\n  }\n\n  raisinLinks.forEach(link => {\n    if (link.innerHTML.length > maxLength) {\n      link.innerHTML = `${link.innerHTML.replace(/\\.[^/.]+$/, '').slice(0, Math.max(0, maxLength))}...`\n    }\n  })\n}\n\n/**\n * Add an mouse over event listener on each link to display domain name inside the search module if existing\n */\nraisinLinks.forEach(link => {\n  link.addEventListener('mouseover', event => {\n    event.preventDefault()\n    if (searchInput) {\n      searchInput.placeholder = link.hostname\n    }\n  })\n})\n\nexport {truncateLinkName}\n","// //////// CLOCK //////// //\n\nconst clockContainer = document.querySelector('pp-clock-inner')\n\n/**\n * Main exported function that sets time, date, and attaches event handler\n * @returns {void} Nothing\n */\nexport function startClockModule() {\n  displayTime()\n  displayDate()\n  clockContainer.addEventListener('click', toggleClockDisplay)\n}\n\n/**\n * Set and display formatted current time based on user locale\n * @returns {void} Nothing\n */\nfunction displayTime() {\n  const d = new Date()\n  const h = d.getHours()\n  const m = d.getMinutes()\n  const s = d.getSeconds()\n\n  const day = d.toLocaleDateString(process.env.CLOCK_LOCALE, {weekday: 'short'}).toUpperCase()\n  const hour = h < 10 ? `0${h}` : h\n  const minute = m < 10 ? `0${m}` : m\n  const second = s < 10 ? `0${s}` : s\n\n  document.querySelector('.pp-clock-time').innerHTML = `${day} : ${hour} : ${minute} : ${second}`\n\n  setTimeout(displayTime, 1000)\n}\n\n/**\n * Set and display formatted current date based on user locale\n * @returns {void} Nothing\n */\nfunction displayDate() {\n  const today = new Date()\n  const options = {year: 'numeric', month: 'short', day: 'numeric'}\n\n  document.querySelector('.pp-clock-date').innerHTML = today.toLocaleDateString(process.env.CLOCK_LOCALE, options)\n}\n\n/**\n * Toggle container css class to flip the module\n * @returns {void} Nothing\n */\nfunction toggleClockDisplay() {\n  clockContainer.classList.toggle('is-flipped')\n}\n","// //////// SEARCH //////// //\n\nconst iconList = document.querySelectorAll('.pp-search-icon')\n\n/**\n * Main exported function that attaches event handler to specified DOM elements\n * @returns {void} Nothing\n */\nexport function startSearchModule() {\n  const searchContainer = document.querySelector('pp-search')\n  const buttonsContainer = document.querySelector('pp-engine-buttons')\n\n  buttonsContainer.addEventListener('click', toggleEngineIcons)\n  searchContainer.addEventListener('keypress', sendSearch)\n}\n\n/**\n * Toggle icon display based on custom html attribute found through the click event\n * @param {Object} event the event object that contains click target data\n * @returns {void} Nothing\n */\nfunction toggleEngineIcons(event) {\n  iconList.forEach(icon => {\n    icon.dataset.state = 'inactive'\n  })\n\n  event.target.dataset.state = 'active'\n}\n\n/**\n * Trigger search if enter key is pressed when using the module\n * the user picked search engine is retrieved through html custom attributes\n * @param {*} event the event object that we are checking for a key press\n * @returns {void} Nothing\n */\nfunction sendSearch(event) {\n  const input = document.querySelector('.pp-search-input')\n\n  if (event.key === 'Enter') {\n    const activeEngine = [...iconList].find(b => [...b.attributes][3].value === 'active')\n    const activeEngineDomain = [...activeEngine.attributes][5].value\n    const url = `${activeEngineDomain}?q=${input.value}`\n    window.open(url)\n    input.value = ''\n  }\n}\n","// //////// BINANCE //////// //\n\nlet cryptoPicked = process.env.BINANCE_SYMBOLS.split(' ')[0].toUpperCase()\nconst cryptoButtonsContainer = document.querySelector('pp-binance-selector')\nconst binanceLoaderContainer = document.querySelector('pp-binance-loader-container')\n\n/**\n * Main exported module function that triggers data request, buttons list creation, chart line creation\n * footer values completion and attaches an event listener on modules buttons\n * @async\n * @returns {void} Nothing\n */\nexport async function startBinanceModule() {\n  const [klineData, tickerData] = await Promise.all([getBinanceKlinesData(), getBinanceTickerData()])\n  const binanceContainer = document.querySelector('pp-binance')\n\n  binanceLoaderContainer.style.display = 'none'\n  binanceContainer.style.display = 'flex'\n\n  generateButtons()\n  generateChartLine(klineData)\n  completeFooterValues(tickerData)\n  cryptoButtonsContainer.addEventListener('click', toggleButtons)\n}\n\n/**\n * GET klines data fron the binance API, used to draw the chart line\n * @async\n * @returns {Promise} Promise object\n */\nasync function getBinanceKlinesData() {\n  const url = 'https://api.binance.com'\n  const pair = process.env.BINANCE_PAIR\n  const klinesPath = '/api/v3/klines'\n  const klinesParameters = `?symbol=${cryptoPicked}${pair}&interval=1d&limit=7`\n  const response = await fetch(`${url}${klinesPath}${klinesParameters}`)\n\n  if (!response.ok) {\n    displayBinanceErrorOnPage(response)\n    throw new Error(`An error has occured: ${response.status} => ${response.statusText}`)\n  }\n\n  return response.json()\n}\n\n/**\n * GET ticker data fron the binance API, used to get current crypto values\n * @async\n * @returns {Promise} Promise object\n */\nasync function getBinanceTickerData() {\n  const url = 'https://api.binance.com'\n  const pair = process.env.BINANCE_PAIR\n  const tickerPath = '/api/v3/ticker/24hr'\n  const tickerParameters = `?symbol=${cryptoPicked}${pair}`\n  const response = await fetch(`${url}${tickerPath}${tickerParameters}`)\n\n  if (!response.ok) {\n    displayBinanceErrorOnPage(response)\n    throw new Error(`An error has occured: ${response.status} => ${response.statusText}`)\n  }\n\n  return response.json()\n}\n\n/**\n * Create and display a list of buttons based on user ENV variables choices\n * @returns {void} Nothing\n */\nfunction generateButtons() {\n  const symbolsList = process.env.BINANCE_SYMBOLS.split(' ')\n\n  symbolsList.forEach(symbol => {\n    const newButton = document.createElement('button')\n    cryptoButtonsContainer.append(newButton)\n    newButton.className = 'binance-selector-button'\n    newButton.dataset.state = 'inactive'\n    newButton.innerHTML = symbol\n  })\n\n  cryptoButtonsContainer.firstChild.dataset.state = 'active'\n}\n\n/**\n * Generate a chart line in SVG based on binance tickler API data.\n * @param {Array} data An array of arrays with choosen symbol data listed by days\n * @returns {void} Nothing\n */\nfunction generateChartLine(data) {\n  const filteredData = data.map(value => Number(value[1]))\n  const svg = document.querySelector('.binance-chart-svg')\n  const svgContainerWidth = document.querySelector('pp-binance-chart').offsetWidth\n  const svgContainerHeight = 130\n  const maxCryptoValue = Math.max(...filteredData)\n  const minCryptoValue = Math.min(...filteredData)\n  const xAxisPixelvalues = index => (svgContainerWidth / (filteredData.length - 1)) * index\n  const yAxisPixelValues = value => Math.round(((value - minCryptoValue) * svgContainerHeight) / (maxCryptoValue - minCryptoValue))\n  const pixelCoordinatesArray = filteredData.map((value, index) => [xAxisPixelvalues(index), yAxisPixelValues(value)])\n  const svgPath = pixelCoordinatesArray.map(pixel => pixel[0] === 0 ? `M ${pixel[0]},${pixel[1]}` : `L ${pixel[0]} ${pixel[1]}`).join(' ')\n\n  const svgCode = `\n    <defs>\n      <linearGradient id=\"gradient\" x1=\"0%\" x2=\"100%\">\n        <stop offset=\"0%\" stop-color=\"var(--module-background)\" />\n        <stop offset=\"20%\" stop-color=\"var(--main)\" />\n        <stop offset=\"80%\" stop-color=\"var(--main)\" />\n        <stop offset=\"100%\" stop-color=\"var(--module-background)\" />\n      </linearGradient>\n    </defs>\n    <path d=\"${svgPath}\" transform=\"translate(0, 10)\" stroke=\"url(#gradient)\" fill=\"none\" stroke-width=\"7\" stroke-linejoin=\"round\" />\n  `\n\n  svg.innerHTML = svgCode\n}\n\n/**\n * Add lastPrice and priceCHange data on module footer\n * @param {Object} data An object of various current data about the choosen symbol\n * @returns {void} Nothing\n */\nfunction completeFooterValues(data) {\n  const differenceValue = document.querySelector('.binance-difference-value')\n  const currentValue = document.querySelector('.binance-current-value')\n  const pairSymbol = process.env.BINANCE_PAIR_SYMBOL\n  const lastPrice = Number(data.lastPrice)\n  const priceChange = Number(data.priceChange)\n\n  differenceValue.innerHTML = `${priceChange}<span class=\"binance-money-unit\">${pairSymbol}</span>`\n  currentValue.innerHTML = `${lastPrice}<span class=\"binance-money-unit\">${pairSymbol}</span>`\n}\n\n/**\n * If one of binance HTTP requests fail, get error response and display info on the page\n * @param {Object} response the error response from the API\n * @returns {void} Nothing\n */\nfunction displayBinanceErrorOnPage(response) {\n  const binanceErrorContainer = document.querySelector('pp-binance-error-container')\n  const binanceErrorCode = document.querySelector('.binance-error-code')\n\n  binanceErrorCode.innerHTML = response.status\n  binanceLoaderContainer.style.display = 'none'\n  binanceErrorContainer.style.display = 'flex'\n}\n\n/**\n * If a button is clicked, his state is changed and HTTP requests are called again\n * @async\n * @param {Object} event Data about the clicked button\n * @returns {void} Nothing\n */\nasync function toggleButtons(event) {\n  const buttonsList = document.querySelectorAll('.binance-selector-button')\n\n  buttonsList.forEach(button => {\n    button.dataset.state = 'inactive'\n  })\n  event.target.dataset.state = 'active'\n  cryptoPicked = event.target.innerHTML.toUpperCase()\n\n  const [klineData, tickerData] = await Promise.all([getBinanceKlinesData(), getBinanceTickerData()])\n  generateChartLine(klineData)\n  completeFooterValues(tickerData)\n}\n","// //////// WEATHER //////// //\nconst openweatherInner = document.querySelector('pp-openweather-inner')\nconst loaderContainer = document.querySelector('pp-openweather-loader-container')\n\n/**\n * Main exported module function that trigger data request, DOM elements collection, DOM elements filling\n * add an event listener on module and display it\n * @async\n * @returns {void} Nothing\n */\nexport async function startOpenWeatherModule() {\n  const [dom, data] = await Promise.all([catchOpenWeatherDomElements(), getOpenWeatherData()])\n  fillOpenWeatherDomElements(data, dom)\n  openweatherInner.addEventListener('click', toggleOpenWeatherDisplay)\n  loaderContainer.style.display = 'none'\n  dom.container.style.display = 'flex'\n}\n\n/**\n * GET data fron the openWeather API\n * @async\n * @returns {Promise} Promise object\n */\nasync function getOpenWeatherData() {\n  const url = 'https://api.openweathermap.org/data/2.5/weather'\n  const city = process.env.OPEN_WEATHER_CITY_QUERY_NAME\n  const units = process.env.OPEN_WEATHER_UNITS\n  const apiKey = process.env.OPEN_WEATHER_API_KEY\n  const response = await fetch(`${url}?q=${city}&units=${units}&APPID=${apiKey}`)\n\n  if (!response.ok) {\n    displayOpenWeatherErrorOnPage(response)\n    throw new Error(`An error has occured: ${response.status} => ${response.statusText}`)\n  }\n\n  return response.json()\n}\n\n/**\n * GET DOM elements that will later be filled with data\n * @async\n * @returns {Promise} Promise object that resolved with DOM elements contained in an object\n */\nasync function catchOpenWeatherDomElements() {\n  return {\n    container: document.querySelector('pp-openweather'),\n    temperature: document.querySelector('.temp-value'),\n    humid: document.querySelector('.humid-value'),\n    icons: [...document.querySelectorAll('.pp-openweather-icon')],\n    cityName: document.querySelector('.city-value'),\n    sunrise: document.querySelector('.openweather-back-sunrise'),\n    sunset: document.querySelector('.openweather-back-sunset')\n  }\n}\n\n/**\n * Fill targeted DOM elements with openweather API data\n * @param {Object} data data from the openwaether API\n * @param {Object} dom DOM elements\n * @returns {void} Nothing\n */\nfunction fillOpenWeatherDomElements(data, dom) {\n  dom.icons.forEach(icon => {\n    if (icon.getAttribute('data-type').includes(data.weather[0].main.toLowerCase())) {\n      icon.dataset.state = 'show'\n    } else {\n      icon.dataset.state = 'hide'\n    }\n  })\n\n  dom.cityName.innerHTML = process.env.OPEN_WEATHER_CITY_DISPLAY_NAME || process.env.OPEN_WEATHER_CITY_QUERY_NAME\n  dom.temperature.innerHTML = data.main.temp > 0 && data.main.temp < 10 ? `0${Math.round(data.main.temp)}°` : `${Math.round(data.main.temp)}°`\n  dom.humid.innerHTML = `${data.main.humidity}%`\n  dom.sunrise.innerHTML = formatTimestamp(data.sys.sunrise)\n  dom.sunset.innerHTML = formatTimestamp(data.sys.sunset)\n}\n\n/**\n * If openweather HTTP request fails, get error response and display info on the page\n * @param {Object} response the error response from the API\n * @returns {void} Nothing\n */\nfunction displayOpenWeatherErrorOnPage(response) {\n  const errorContainer = document.querySelector('pp-openweather-error-container')\n  const errorCode = document.querySelector('.openweather-error-code')\n\n  errorCode.innerHTML = response.status\n  loaderContainer.style.display = 'none'\n  errorContainer.style.display = 'flex'\n}\n\n/**\n * Format timestamp to human readable hours and minutes\n * @param {Number} stamp timestamp found in API response for sunrise and sunset\n * @returns {string} time in hours and minutes\n */\nfunction formatTimestamp(stamp) {\n  const date = new Date(stamp * 1000)\n  let h = date.getHours()\n  let m = date.getMinutes()\n\n  h = (h < 10) ? '0' + h : h\n  m = (m < 10) ? '0' + m : m\n\n  return `${h}:${m}`\n}\n\n/**\n * Add/remove class on dom element for flipping whole module\n * @returns {void} Nothing\n */\nfunction toggleOpenWeatherDisplay() {\n  openweatherInner.classList.toggle('is-flipped')\n}\n","// //////// UNSPLASH //////// //\n\nconst unsplashLoaderContainer = document.querySelector('pp-unsplash-loader-container')\n\n/**\n * Main module function that trigger data request, DOM elements collection and DOM elements filling\n * @async\n * @returns {void} Nothing\n */\nexport async function startUnsplashModule() {\n  const data = await getUnsplashData()\n  const image = document.querySelector('.unsplash-small')\n  const unsplashContainer = document.querySelector('pp-unsplash')\n\n  image.src = data.urls.small\n  unsplashLoaderContainer.style.display = 'none'\n  unsplashContainer.style.display = 'flex'\n}\n\n/**\n * GET data fron the unsplash API\n * @async\n * @returns {Promise} Promise object\n */\nasync function getUnsplashData() {\n  const apiKey = process.env.UNSPLASH_API_KEY\n  const orientation = 'landscape'\n  const collectionId = process.env.UNSPLASH_COLLECTION_ID\n  const url = 'https://api.unsplash.com/'\n  const path = 'photos/random/'\n  const parameters = `client_id=${apiKey}&orientation=${orientation}&collections=${collectionId}`\n  const response = await fetch(`${url}${path}?${parameters}`)\n\n  if (!response.ok) {\n    displayUnsplashErrorOnPage(response)\n    throw new Error(`An error has occured: ${response.status} => ${response.statusText}`)\n  }\n\n  return response.json()\n}\n\n/**\n * If unsplash HTTP request fails, get error response and display info on the page\n * @param {Object} response the error response from the API\n * @returns {void} Nothing\n */\nfunction displayUnsplashErrorOnPage(response) {\n  const unsplashErrorContainer = document.querySelector('pp-unsplash-error-container')\n  const unsplashErrorCode = document.querySelector('.unsplash-error-code')\n\n  unsplashErrorCode.innerHTML = response.status\n  unsplashLoaderContainer.style.display = 'none'\n  unsplashErrorContainer.style.display = 'flex'\n}\n","// //////// STORMGLASS //////// //\nconst stormglassLoaderContainer = document.querySelector('pp-stormglass-loader-container')\n\n/**\n * Main exported module function that triggers data request, DOM elements collection, DOM elements filling\n * and display the module\n * @async\n * @returns {void} Nothing\n */\nexport async function startStormglassModule() {\n  const [dom, data] = await Promise.all([catchStormglassDomElements(), getStormglassData()])\n\n  fillStormglassDomElements(dom, data)\n  stormglassLoaderContainer.style.display = 'none'\n  dom.stormglassContainer.style.display = 'flex'\n}\n\n/**\n * GET data fron the stormglass API\n * @async\n * @returns {Promise} Promise object\n */\nasync function getStormglassData() {\n  const currentISODate = new Date().toISOString().slice(0, 13)\n  const apiKey = process.env.STORMGLASS_API_KEY\n  const lat = process.env.STORMGLASS_LATITUDE\n  const lng = process.env.STORMGLASS_LONGITUDE\n  const url = 'https://api.stormglass.io/v2/'\n  const path = 'weather/point'\n  const parameters = ['waterTemperature', 'waveDirection', 'waveHeight', 'wavePeriod', 'windDirection', 'windSpeed']\n  const response = await fetch(`${url}${path}?lat=${lat}&lng=${lng}&params=${parameters}`, {headers: {Authorization: apiKey}})\n\n  if (!response.ok) {\n    displayStormglassErrorOnPage(response)\n    throw new Error(`An error has occured: ${response.status} => ${response.statusText}`)\n  }\n\n  const jsonResponse = await response.json()\n  return jsonResponse.hours.find(h => h.time.includes(currentISODate))\n}\n\n/**\n * Get DOM elements that will later be filled with data\n * @async\n * @returns {Promise} Promise object that resolved with DOM elements contained in an object\n */\nasync function catchStormglassDomElements() {\n  return {\n    stormglassContainer: document.querySelector('pp-stormglass'),\n    spotName: document.querySelector('.header-spot'),\n    waterTemporary: document.querySelector('.watertemp-value'),\n    windDirection: document.querySelector('.winddir-icon'),\n    windSpeed: document.querySelector('.windspeed-value'),\n    waveHeight: document.querySelector('.waveheight-value'),\n    wavePeriod: document.querySelector('.waveperiod-value'),\n    wavedir: document.querySelector('.wavedir-icon')\n  }\n}\n\n/**\n * Fill targeted DOM elements with stormglass API data\n * @param {Object} data data from the stormglass API\n * @param {Object} dom DOM elements collection\n * @returns {void} Nothing\n */\nasync function fillStormglassDomElements(dom, data) {\n  dom.spotName.innerHTML = process.env.STORMGLASS_SPOT_NAME\n  dom.waterTemporary.innerHTML = `${Math.round(data.waterTemperature.meto || data.waterTemperature.noaa || data.waterTemperature.sg)}°`\n  dom.windDirection.style.transform = `rotate(${data.windDirection.icon || data.windDirection.noaa || data.windDirection.sg}deg)`\n  dom.windSpeed.innerHTML = `${data.windSpeed.icon || data.windSpeed.noaa || data.windSpeed.sg}<span class=\"pp-stormglass-unit\">m/s</span>`\n  dom.waveHeight.innerHTML = `${data.waveHeight.icon || data.waveHeight.dwd}<span class=\"pp-stormglass-unit\">m</span>`\n  dom.wavePeriod.innerHTML = `${Math.round(data.wavePeriod.icon || data.wavePeriod.noaa)}<span class=\"pp-stormglass-unit\">s</span>`\n  dom.wavedir.style.transform = `rotate(${data.waveDirection.icon || data.waveDirection.noaa || data.waveDirection.meteo}deg)`\n}\n\n/**\n * If stormglass HTTP request fails, get error response and display info on the page\n * @param {Object} response the error response from the API\n * @returns {void} Nothing\n */\nfunction displayStormglassErrorOnPage(response) {\n  const stormglassErrorContainer = document.querySelector('pp-stormglass-error-container')\n  const stormglassErrorCode = document.querySelector('.stormglass-error-code')\n  const stormglassErrorMesage = document.querySelector('.stormglass-error-message')\n\n  stormglassErrorCode.innerHTML = response.status\n  stormglassErrorMesage.innerHTML = response.statusText\n  stormglassLoaderContainer.style.display = 'none'\n  stormglassErrorContainer.style.display = 'flex'\n}\n","// //////// INDEX //////// //\n\nimport {truncateLinkName} from './raisin/raisin.js'\nimport {startClockModule} from './clock/clock.js'\nimport {startSearchModule} from './search/search.js'\nimport {startBinanceModule} from './binance/binance.js'\nimport {startOpenWeatherModule} from './openweather/openweather.js'\nimport {startUnsplashModule} from './unsplash/unsplash.js'\nimport {startStormglassModule} from './stormglass/stormglass.js'\n\n// Raisin\ntruncateLinkName()\n\n// Clock\nstartClockModule()\n\n// Search\nstartSearchModule()\n\n// Binance\nstartBinanceModule()\n\n// Openweather\nstartOpenWeatherModule()\n\n// Unsplash\nstartUnsplashModule()\n\n// Stormglass\nstartStormglassModule()\n\n"]}